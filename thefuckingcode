/*

  Notes

*/
#include <Servo.h>
#include <SoftwareSerial.h>
Servo myservo;  // create servo object to control a servo

#define enablePin  9   // Connects to the RFID's ENABLE pin
#define rxPin      10  // Serial input (connects to the RFID's SOUT pin)
#define txPin      11  // Serial output (unused)
#define BUFSIZE    11  // Size of receive buffer (in bytes) (10-byte unique ID + null character)
#define RFID_START  0x0A  // RFID Reader Start and Stop bytes
#define RFID_STOP   0x0D

SoftwareSerial rfidSerial =  SoftwareSerial(rxPin, txPin);

// constants won't change. They're used here to
// set pin numbers:
const int buttonPin = 6;     // the number of the pushbutton pin
const int ledPin =  13;      // the number of the LED pin
char Str4[ ] = "arduino";

// variables will change:
int buttonState = 0;         // variable for reading the pushbutton status
int pos = 0;    // variable to store the servo position


void setup() {
  Serial.begin(9600);
  while (!Serial);   // wait until ready
  Serial.println("\n\nParallax RFID Card Reader");
  pinMode(enablePin, OUTPUT);
  pinMode(rxPin, INPUT);
  rfidSerial.begin(2400);
  Serial.flush();
  digitalWrite(enablePin, HIGH);  // disable RFID Reader
  pinMode(ledPin, OUTPUT);// initialize the LED pin as an output:
  pinMode(buttonPin, INPUT); // initialize the pushbutton pin as an input:
  myservo.attach(8);  // attaches the servo on pin 9 to the servo object
}

void loop() {
  
  
  digitalWrite(enablePin, LOW);   // enable the RFID Reader
  
  // Wait for a response from the RFID Reader
  // See Arduino readBytesUntil() as an alternative solution to read data from the reader
  char rfidData[BUFSIZE];  // Buffer for incoming data
  char offset = 0;         // Offset into buffer
  rfidData[0] = 0;         // Clear the buffer
      
  while(1)
  {
    if (rfidSerial.available() > 0) // If there are any bytes available to read, then the RFID Reader has probably seen a valid tag
    {
      rfidData[offset] = rfidSerial.read();  // Get the byte and store it in our buffer
      if (rfidData[offset] == RFID_START)    // If we receive the start byte from the RFID Reader, then get ready to receive the tag's unique ID
      {
        offset = -1;     // Clear offset (will be incremented back to 0 at the end of the loop)
      }
      else if (rfidData[offset] == RFID_STOP)  // If we receive the stop byte from the RFID Reader, then the tag's entire unique ID has been sent
      {
        rfidData[offset] = 0; // Null terminate the string of bytes we just received
        break;                // Break out of the loop
      }
          
      offset++;  // Increment offset into array
      if (offset >= BUFSIZE) offset = 0; // If the incoming data string is longer than our buffer, wrap around to avoid going out-of-bounds
    }
  }

  Serial.println(rfidData);       // The rfidData string should now contain the tag's unique ID with a null termination, so display it on the Serial Monitor
  Serial.flush();                 // Wait for all bytes to be transmitted to the Serial Monitor
    
if (rfidData == "66006C52E8")
 {
    myservo.write(180);     
    delay(1000);  
    myservo.write(90);  
    delay(1000);                   
    }

  else

  {
    myservo.write(90);              // tell servo to go to position in variable 'pos'
    delay(100);
  }

delay(0);
}



